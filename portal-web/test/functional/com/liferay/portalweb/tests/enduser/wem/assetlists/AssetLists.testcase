@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Lists";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Assert that the UI works correctly for adding Asset Lists."
	@priority = "5"
	test AddAssetList {
		task("Create a manual asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				title = "Manual Asset List Test"
			);
		}

		task("Create a dynamic asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addDynamic(
				title = "Dynamic Asset List Test"
			);
		}

		task("Assert Asset List Entry names and types.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.viewAssetListEntry(
				title = "Manual Asset List Test",
				type = "Manual"
			);

			AssetListsAdmin.viewAssetListEntry(
				title = "Dynamic Asset List Test",
				type = "Dynamic"
			);
		}
	}

	@description = "Assert that the UI correctly displays a useful error message when an Asset List is added with a duplicate name."
	@priority = "3"
	test AddDuplicateAssetList {
		task("Create a manual asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				title = "Manual Asset List Test"
			);
		}

		task("Create another asset list, except expect it to fail with the correct error message.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				errorMessage = "An asset list with that title already exists.",
				expectFail = "true",
				title = "Asset List Test"
			);
		}
	}

	@description = "Assert that the UI works correctly for deleting Asset Lists."
	@priority = "5"
	test DeleteAssetList {
		task("Create a manual asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				title = "Manual Asset List Test"
			);
		}

		task("Create a dynamic asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addDynamic(
				title = "Dynamic Asset List Test"
			);
		}

		task("Delete both asset lists.") {
			LexiconEntry.delete(
				rowEntry = "Manual Asset List Test"
			);

			LexiconEntry.delete(
				rowEntry = "Dynamic Asset List Test"
			);
		}

		task("Assert the taglib that displays when there are no entries displays.") {
			AssertElementPresent(
				locator1 = "Message#EMPTY_INFO_TAGLIB"
			);
		}
	}

	@description = "Assert that the UI works correctly for renaming Asset Lists."
	@priority = "5"
	test RenameAssetList {
		task ("Create a manual asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				title = "Manual Asset List Test"
			);
		}

		task ("Rename the asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.rename(
				assetListName = "Manual Asset List Test",
				title = "Manual Asset List Edit"
			);
		}

		task("Assert that the name of the asset list changed correctly.") {
			AssetListsAdmin.viewAssetListEntry(
				title = "Manual Asset List Edit",
				type = "Manual"
			);
		}
	}

	@description = "Assert that Asset Lists correctly display their selected content."
	@priority = "4"
	test ViewAssetListContent {
		task("Create a WC using JSON for performance.") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title"
			);
		}

		task("Create a manual asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				title = "Manual Asset List Test"
			);
		}

		task("Select the created WC to be linked to the asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Asset List Test",
				assetName = "WC WebContent Title",
				assetType = "Basic Web Content"
			);
		}

		task("Assert we can see the selected WC from the View Content action for the asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.viewContent(
				assetListName = "Manual Asset List Test",
				assetTitle = "WC WebContent Title",
				assetType = "Web Content Article"
			);
		}
	}

	@description = "Assert that Asset Lists correctly display where they are used."
	@priority = "4"
	test ViewAssetListUsages {
		task("Create a public page using JSON for performance.") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name"
			);
		}

		task("Create a manual asset list.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.addManual(
				title = "Manual Asset List Test"
			);
		}

		task("Add an Asset Publisher portlet to the created public page.") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name"
			);

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task("Select the created manual asset list to be used in the asset publisher portlet.") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name"
			);

			AssetPublisherPortlet.selectAssetList(
				assetListName = "Manual Asset List Test"
			);
		}

		task("Assert the created asset list is used exactly once.") {
			AssetListsAdmin.openAssetListsAdmin(
				siteURLKey = "test-site-name"
			);

			AssetListsAdmin.viewUsages(
				assetListName = "Manual Asset List Test",
				usageAmount = "1",
				usageType = "All"
			);
		}
	}
}